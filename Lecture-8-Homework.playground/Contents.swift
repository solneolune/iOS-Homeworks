import Foundation
//: ### РюЁ 1. рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ Class Book.
//: - Properties: bookID(рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃўрЃЊрЃћрЃюрЃбрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃў Int), String title, String author, Bool isBorrowed.
//: - Designated Init.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃгрЃўрЃњрЃюрЃА рЃарЃЮрЃњрЃЮрЃарЃф borrowed-рЃА.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃгрЃўрЃњрЃюрЃА рЃарЃЮрЃњрЃЮрЃарЃф рЃЊрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃБрЃџрЃА.
class Book {
    static var i = 0 // рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃўрЃЊрЃћрЃюрЃбрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃАрЃЌрЃЋрЃўрЃА, UUID рЃЏрЃћрЃАрЃўрЃ»рЃў рЃарЃЮрЃЏ рЃЋрЃюрЃљрЃ«рЃћ рЃБрЃЎрЃЋрЃћ рЃЊрЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃБрЃџрЃў рЃЏрЃЦрЃЮрЃюрЃЊрЃљ рЃЮрЃЌрЃ«рЃўрЃЋрЃћ рЃЌрЃљрЃАрЃЦрЃў рЃЊрЃљ рЃљрЃЏрЃўрЃбрЃЮрЃЏ рЃЊрЃљрЃЋрЃбрЃЮрЃЋрЃћрЃЉ рЃљрЃАрЃћ
    
    var bookID: Int
    var title: String
    var author: String
    var isBorrowed: Bool
    
    init(title: String, author: String, isBorrowed: Bool = false) { // bookID рЃЏрЃЮрЃЋрЃљрЃерЃЮрЃарЃћ рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃљрЃфрЃўрЃўрЃЊрЃљрЃю рЃарЃљрЃЊрЃњрЃљрЃю рЃЏрЃћ рЃЋрЃљрЃћрЃАрЃљрЃўрЃюрЃћрЃЉ рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃа рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃљрЃА
        self.bookID = Book.i
        Book.i += 1
        self.title = title
        self.author = author
        self.isBorrowed = isBorrowed
    }
    
    func borrowBook() {
        isBorrowed = true
    }
    
    func returnBook() {
        isBorrowed = false
    }
}

 // рЃбрЃћрЃАрЃбрЃћрЃЉрЃў
let book1 = Book(title: "Murder on the Orient Express", author: "Agatha Christie")
let book2 = Book(title: "Totem and Taboo", author: "Sigmund Freud", isBorrowed: true)
let book3 = Book(title: "Kafka on the Shore", author: "Haruki Murakami")

print("Book 1 -> ID \(book1.bookID), Title: \(book1.title), Author: \(book1.author), Available: \(book1.isBorrowed)")
print("Book 2 -> ID \(book2.bookID), Title: \(book2.title), Author: \(book2.author), Available: \(book2.isBorrowed)")
print("Book 3 -> ID \(book3.bookID), Title: \(book3.title), Author: \(book3.author), Available: \(book3.isBorrowed)")

print("""
­ЪЊї
--------------------------------------
Available Books - 23/03/2024 ->
1. \(book1.title): \(book1.isBorrowed ? "­ЪџФ" : "РюЁ")
2. \(book2.title): \(book2.isBorrowed ? "­ЪџФ" : "РюЁ")
3. \(book3.title): \(book3.isBorrowed ? "­ЪџФ" : "РюЁ")
--------------------------------------
""")

book3.borrowBook()
book2.returnBook()

print("""
­ЪЊї
--------------------------------------
Borrowed Books - 24/03/2024 ->
1. \(book1.title): \(book1.isBorrowed ? "­ЪџФ" : "РюЁ")
2. \(book2.title): \(book2.isBorrowed ? "­ЪџФ" : "РюЁ")
3. \(book3.title): \(book3.isBorrowed ? "­ЪџФ" : "РюЁ")
--------------------------------------
""")

//: ### РюЁ 2. рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ Class Owner
//: - Properties: ownerId(рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃўрЃЊрЃћрЃюрЃбрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃў Int), String name, Books Array рЃАрЃљрЃ«рЃћрЃџрЃўрЃЌ borrowedBooks.
//: - Designated Init.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃФрЃџрЃћрЃЋрЃА рЃБрЃцрЃџрЃћрЃЉрЃљрЃА рЃарЃЮрЃЏ рЃљрЃўрЃдрЃЮрЃА рЃгрЃўрЃњрЃюрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃФрЃџрЃћрЃЋрЃА рЃБрЃцрЃџрЃћрЃЉрЃљрЃА рЃарЃЮрЃЏ рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃЮрЃА рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃюрЃў.
class Owner {
    static var i = 0
    
    var ownerId: Int
    var name: String
    var borrowedBooks: [Book]
    
    init(name: String, borrowedBooks: [Book] = []) {
        self.ownerId = Owner.i
        Owner.i += 1
        self.name = name
        self.borrowedBooks = borrowedBooks
    }
    
    func allowBorrowing(_ book: Book) {
        if !book.isBorrowed {
            book.borrowBook()
            borrowedBooks.append(book)
            print("\(book.title) рЃЊрЃљрЃћрЃЏрЃљрЃбрЃљ рЃЌрЃЦрЃЋрЃћрЃюрЃА рЃЏрЃўрЃћрЃа рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃА рЃАрЃўрЃљрЃерЃў. рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃЮрЃЌ рЃгрЃўрЃњрЃюрЃў рЃљрЃарЃљрЃБрЃњрЃЋрЃўрЃљрЃюрЃћрЃА 2 рЃЎрЃЋрЃўрЃарЃљрЃерЃў.")
            print("рЃўрЃ«рЃўрЃџрЃћрЃЌ рЃЌрЃЦрЃЋрЃћрЃюрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃА рЃАрЃўрЃљ: \(self.name): \(self.borrowedBooks.map { $0.title })")
        } else {
            print("\(book.title) рЃљрЃЏрЃЪрЃљрЃЏрЃљрЃЊ рЃљрЃа рЃљрЃарЃўрЃА рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў, рЃАрЃфрЃљрЃЊрЃћрЃЌ рЃЏрЃЮрЃњрЃЋрЃўрЃљрЃюрЃћрЃЉрЃўрЃЌ.")
        }
    }
    
    func allowReturning(_ book: Book) {
        if borrowedBooks.contains(where: { $0 === book }) {
            book.returnBook()
            borrowedBooks.removeAll {$0 === book}
            print("\(book.title) рЃЊрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃБрЃџрЃўрЃљ.")
            print("рЃўрЃ«рЃўрЃџрЃћрЃЌ рЃЌрЃЦрЃЋрЃћрЃюрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃА рЃАрЃўрЃљ: \(self.name): \(self.borrowedBooks.map { $0.title })")
        } else {
            print("\(book.title) рЃЋрЃћрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ рЃЌрЃЦрЃЋрЃћрЃюрЃА рЃЏрЃўрЃћрЃа рЃњрЃљрЃбрЃљрЃюрЃўрЃџ рЃгрЃўрЃњрЃюрЃћрЃЉрЃерЃў.")
        }
    }
}

    // рЃбрЃћрЃАрЃбрЃћрЃЉрЃў
let owner1 = Owner(name: "рЃњрЃљрЃўрЃЮрЃќ рЃдрЃџрЃЮрЃюрЃбрЃў")
let owner2 = Owner(name: "рЃћрЃюрЃФрЃћрЃџрЃљ рЃЕрЃЮрЃџрЃЮрЃДрЃљрЃџрЃерЃЋрЃўрЃџрЃў")
let owner3 = Owner(name: "рЃбрЃћрЃарЃћрЃюрЃбрЃў рЃљрЃЏрЃўрЃарЃљрЃюрЃљрЃерЃЋрЃўрЃџрЃў")

owner1.allowBorrowing(book1)
owner1.allowBorrowing(book2)
owner2.allowBorrowing(book1)
owner3.allowBorrowing(book3)
owner1.allowReturning(book1)
owner3.allowReturning(book2)

 
//: ### РюЁ 3. рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ Class Library
//: - Properties: Books Array, Owners Array.
//: - Designated Init.
//: - Method рЃгрЃўрЃњрЃюрЃўрЃА рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃљ, рЃарЃљрЃЌрЃљ рЃЕрЃЋрЃћрЃюрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљ рЃерЃћрЃЋрЃљрЃЋрЃАрЃЮрЃЌ рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃЌ.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃљрЃЏрЃљрЃбрЃћрЃЉрЃА Owner-рЃА.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃърЃЮрЃБрЃџрЃЮрЃЉрЃА рЃЊрЃљ рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃДрЃЋрЃћрЃџрЃљ рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏ рЃгрЃўрЃњрЃюрЃА.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃърЃЮрЃБрЃџрЃЮрЃЉрЃА рЃЊрЃљ рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃДрЃЋрЃћрЃџрЃљ рЃгрЃљрЃдрЃћрЃЉрЃБрЃџ рЃгрЃўрЃњрЃюрЃА.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃћрЃФрЃћрЃЉрЃА Owner-рЃА рЃЌрЃљрЃЋрЃўрЃАрЃў рЃљрЃўрЃЊрЃўрЃЌ рЃЌрЃБ рЃћрЃњрЃћрЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃЮрЃЉрЃА.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃћрЃФрЃћрЃЉрЃА рЃгрЃљрЃдрЃћрЃЉрЃБрЃџ рЃгрЃўрЃњрЃюрЃћрЃЉрЃА рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃў Owner-рЃўрЃА рЃЏрЃўрЃћрЃа.
//: - Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃФрЃџрЃћрЃЋрЃА рЃБрЃцрЃџрЃћрЃЉрЃљрЃА Owner-рЃА рЃгрЃљрЃљрЃдрЃћрЃЉрЃўрЃюрЃЮрЃА рЃгрЃўрЃњрЃюрЃў рЃЌрЃБ рЃўрЃА рЃЌрЃљрЃЋрЃўрЃАрЃБрЃцрЃљрЃџрЃўрЃљ.
class Library {
    var booksArr: [Book]
    var ownersArr: [Owner]
    
    init(booksArr: [Book] = [], ownersArr: [Owner] = []) {
        self.booksArr = booksArr
        self.ownersArr = ownersArr
    }
    
    func addBook(_ book: Book) {
        booksArr.append(book)
        print("рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃЊрЃљрЃћрЃЏрЃљрЃбрЃљ рЃљрЃ«рЃљрЃџрЃў рЃгрЃўрЃњрЃюрЃў: \(book.title)")
    }
    
    func addOwner(_ owner: Owner) {
        ownersArr.append(owner)
        print("рЃЏрЃЎрЃўрЃЌрЃ«рЃЋрЃћрЃџрЃЌрЃљ рЃЉрЃљрЃќрЃљрЃерЃў рЃЊрЃљрЃћрЃЏрЃљрЃбрЃљ рЃљрЃ«рЃљрЃџрЃў рЃърЃўрЃарЃў: \(owner.name)")
    }
    
    func findAvailableBooks() -> [Book] {
        var availableBooks = [Book]()
        
        for book in booksArr {
            if !book.isBorrowed {
                availableBooks.append(book)
            }
        }
        
        if availableBooks.isEmpty {
            print("рЃљрЃЏрЃЪрЃљрЃЏрЃљрЃЊ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃљрЃарЃф рЃћрЃарЃЌрЃў рЃгрЃўрЃњрЃюрЃў рЃљрЃа рЃљрЃарЃўрЃА рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў.")
        } else {
            print("рЃљрЃЏрЃЪрЃљрЃЏрЃљрЃЊ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃљ: \(availableBooks.map { $0.title })")
        }
        return availableBooks
    }
    
    func findAllBorrowedBooks() -> [Book] {
        var borrowedBooks = [Book]()
        
        for book in booksArr {
            if book.isBorrowed {
                borrowedBooks.append(book)
            }
        }
        
        if borrowedBooks.isEmpty {
            print("рЃљрЃЏрЃЪрЃљрЃЏрЃљрЃЊ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃљрЃарЃф рЃћрЃарЃЌрЃў рЃгрЃўрЃњрЃюрЃў рЃљрЃа рЃљрЃарЃўрЃА рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў.")
        } else {
            print("рЃљрЃЏрЃЪрЃљрЃЏрЃљрЃЊ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃљ: \(borrowedBooks.map { $0.title })")
        }
        return borrowedBooks
    }
    
    func findOwnerByID(_ id: Int) -> Owner? {
        if ownersArr.indices.contains(id) {
            print("рЃљрЃўрЃЊрЃўрЃЌ \"\(id)\" рЃюрЃљрЃърЃЮрЃЋрЃюрЃўрЃљ рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃћрЃџрЃў: \(ownersArr[id].name)")
            return ownersArr[id]
        } else {
            print("рЃљрЃўрЃЊрЃўрЃЌ \"\(id)\" рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃћрЃџрЃў рЃЋрЃћрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ.")
            return nil
        }
    }
    
    func findBooksBorrowedByOwner(_ id: Int) -> [Book]? {
        var owner: Owner
        
        if ownersArr.indices.contains(id) {
            owner = ownersArr[id]
            print("рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃџрЃўрЃА рЃљрЃўрЃЊрЃўрЃЌ \(id)-рЃўрЃА рЃЏрЃўрЃћрЃа рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃљ: \(owner.borrowedBooks.map { $0.title }) ")
            return owner.borrowedBooks
        } else {
            print("рЃљрЃўрЃЊрЃўрЃЌ \"\(id)\" рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃћрЃџрЃў рЃЋрЃћрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ.")
            return nil
        }
    }
    
    func allowOwnerBorrow(_ owner: Owner, _ book: Book) { // рЃЊрЃБрЃърЃџрЃўрЃЎрЃљрЃбрЃў рЃџрЃЮрЃњрЃўрЃЎрЃўрЃА рЃњрЃљрЃгрЃћрЃарЃљ рЃарЃЮрЃЏ рЃљрЃа рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃЊрЃћрЃА, рЃърЃўрЃарЃЊрЃљрЃърЃўрЃа рЃЮрЃБрЃюрЃћрЃарЃўрЃА рЃЎрЃџрЃљрЃАрЃўрЃА рЃЏрЃћрЃЌрЃЮрЃЊрЃА рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃФрЃљрЃ«рЃћрЃЉ рЃЊрЃљ рЃўрЃА рЃљрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃА рЃгрЃўрЃњрЃюрЃўрЃА рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃЮрЃЉрЃљрЃА
        owner.allowBorrowing(book)
    }
}

//: ### рЃњрЃљрЃЋрЃљрЃЎрЃћрЃЌрЃЮрЃЌ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃА рЃАрЃўрЃЏрЃБрЃџрЃљрЃфрЃўрЃљ.
//: - рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ рЃарЃљрЃЏрЃЮрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃгрЃўрЃњрЃюрЃў рЃЊрЃљ рЃарЃљрЃЏрЃЮрЃЊрЃћрЃюрЃўрЃЏрЃћ Owner-рЃў, рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљ.
//: - рЃЊрЃљрЃЋрЃљрЃЏрЃљрЃбрЃЮрЃЌ рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЊрЃљ Owner-рЃћрЃЉрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў
//: - рЃгрЃљрЃЋрЃљрЃдрЃћрЃЉрЃўрЃюрЃЮрЃЌ Owner-рЃћрЃЉрЃА рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЊрЃљ рЃЊрЃљрЃЋрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃўрЃюрЃЮрЃЌ рЃарЃљрЃдрЃљрЃф рЃюрЃљрЃгрЃўрЃџрЃў.
//: - рЃЊрЃљрЃЋрЃЉрЃћрЃГрЃЊрЃЮрЃЌ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃгрЃљрЃдрЃћрЃЉрЃБрЃџ рЃгрЃўрЃњрЃюрЃћрЃЉрЃќрЃћ, рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏ рЃгрЃўрЃњрЃюрЃћрЃЉрЃќрЃћ рЃЊрЃљ рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃбрЃљрЃюрЃЮрЃЌ рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃљрЃЊ рЃћрЃарЃЌрЃў Owner-рЃўрЃА рЃЏрЃўрЃћрЃа.
    // ­Ъњг рЃърЃўрЃарЃЋрЃћрЃџ рЃЮрЃа рЃЌрЃљрЃАрЃЦрЃерЃў рЃБрЃЎрЃЋрЃћ рЃЏрЃљрЃЦрЃЋрЃА рЃњрЃљрЃбрЃћрЃАрЃбрЃўрЃџрЃў рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃўрЃюрЃАрЃбрЃљрЃюрЃАрЃўрЃА рЃерЃћрЃЦрЃЏрЃюрЃљ рЃЊрЃљ рЃЏрЃћрЃЌрЃЮрЃЊрЃћрЃЉрЃў, рЃљрЃЏрЃўрЃбрЃЮрЃЏ рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃДрЃћрЃюрЃћрЃЉ рЃўрЃњрЃўрЃЋрЃћ рЃўрЃюрЃАрЃбрЃљрЃюрЃАрЃћрЃЉрЃА + рЃЊрЃљрЃЋрЃљрЃЏрЃљрЃбрЃћрЃЉ
let book4 = Book(title: "Crime and Punishment", author: "Fyodor Dostoevsky")
let book5 = Book(title: "Anna Karenina", author: "Leo Tolstoy")

let owner4 = Owner(name: "рЃАрЃърЃљрЃарЃбрЃљрЃЎ рЃњрЃљрЃарЃАрЃћрЃЋрЃљрЃюрЃўрЃерЃЋрЃўрЃџрЃў")
let owner5 = Owner(name: "рЃЏрЃќрЃћрЃЦрЃљрЃџрЃљ рЃЏрЃБрЃ«рЃарЃљрЃюрЃћрЃџрЃў")

let library = Library()

let booksToAdd = [book1, book2, book3, book4, book5]
let ownersToAdd = [owner1, owner2, owner3, owner4, owner5]

for book in booksToAdd {
    library.addBook(book)
}
for owner in ownersToAdd {
    library.addOwner(owner)
}

    // рЃгрЃўрЃњрЃюрЃўрЃА рЃњрЃљрЃбрЃљрЃюрЃўрЃА рЃЏрЃћрЃЌрЃЮрЃЊрЃћрЃЉрЃў -> 1. рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃА рЃЏрЃћрЃЌрЃЮрЃЊрЃў 2. рЃЮрЃБрЃюрЃћрЃарЃўрЃА рЃЏрЃћрЃЌрЃЮрЃЊрЃў
library.allowOwnerBorrow(owner4, book4)
owner5.allowBorrowing(book1)

owner1.allowReturning(book2)


    // рЃњрЃљрЃЋрЃљрЃбрЃљрЃюрЃЮрЃЌ рЃњрЃљрЃўрЃЮрЃќрЃА рЃДрЃЋрЃћрЃџрЃљ рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў рЃгрЃўрЃњрЃюрЃў
var findAvailBooks = library.findAvailableBooks()
for book in findAvailBooks {
    library.allowOwnerBorrow(owner1, book)
}
library.findBooksBorrowedByOwner(0) // рЃњрЃљрЃўрЃЮрЃќрЃўрЃА рЃЏрЃўрЃћрЃа рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃў


    // рЃЉрЃЮрЃџрЃЮрЃ»рЃћрЃа рЃњрЃљрЃЋрЃбрЃћрЃАрЃбрЃЮрЃЌ рЃДрЃЋрЃћрЃџрЃљ рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў рЃЊрЃљ рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў
library.findAvailableBooks()
library.findAllBorrowedBooks()


//: # Optional Tasks
//: рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЎрЃџрЃљрЃАрЃў рЃњрЃљрЃЏрЃЮрЃюрЃљрЃЌрЃЦрЃЋрЃљрЃЏрЃћрЃЉрЃўрЃА рЃњрЃћрЃюрЃћрЃарЃљрЃбрЃЮрЃарЃў, рЃАрЃљрЃЊрЃљрЃф рЃњрЃљрЃюрЃЏрЃљрЃарЃбрЃљрЃЋрЃЌ рЃњрЃљрЃЏрЃЮрЃюрЃљрЃЌрЃЦрЃЋрЃљрЃЏрЃА-рЃА рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃўрЃЦрЃюрЃћрЃЉрЃљ рЃАрЃбрЃарЃўрЃюрЃњрЃћрЃЉрЃўрЃАрЃњрЃљрЃю рЃерЃћрЃЏрЃЊрЃњрЃљрЃарЃў рЃЎрЃЮрЃџрЃћрЃЦрЃфрЃўрЃљ. рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЏрЃћрЃЌрЃЮрЃЊрЃў рЃАрЃљрЃЊрЃљрЃф рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃЌ рЃерЃћрЃарЃЕрЃћрЃЋрЃўрЃЌрЃљрЃЊ рЃАрЃ«рЃЋрЃљрЃЊрЃљрЃАрЃ«рЃЋрЃљ рЃ»рЃЮрЃБрЃЦрЃА рЃЊрЃљ рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃљрЃЋрЃЌ рЃЏрЃљрЃА, рЃљрЃАрЃћрЃЋрЃћ рЃЕрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ рЃЏрЃћрЃЌрЃЮрЃЊрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЕрЃљрЃАрЃЋрЃљрЃЏрЃА рЃљрЃю рЃљрЃЏрЃЮрЃљрЃЎрЃџрЃћрЃЉрЃА рЃњрЃљрЃЏрЃЮрЃюрЃљрЃЌрЃЦрЃЋрЃљрЃЏрЃА рЃАрЃўрЃўрЃЊрЃљрЃю. рЃЏрЃЮрЃфрЃћрЃЏрЃБрЃџрЃў рЃњрЃљрЃЦрЃЋрЃЌ РђюрЃЦрЃўрЃџрЃћрЃаРђЮ рЃњрЃљрЃЏрЃЮрЃюрЃљрЃЌрЃЦрЃЋрЃљрЃЏрЃћрЃЉрЃўрЃА рЃАрЃўрЃљ:
//: - рЃЊрЃљрЃЋрЃўрЃюрЃљрЃ«рЃћ рЃЌрЃБ рЃљрЃарЃљ рЃЏрЃўрЃЋрЃ«рЃЋрЃЊрЃў, рЃарЃЮрЃЏ РђЊ РђЮ рЃЊрЃћрЃЋрЃўрЃдрЃБрЃърЃћ. РђЮ
//: - рЃўрЃАрЃћрЃЌрЃў рЃљрЃцрЃћрЃарЃўрЃАрЃбрЃўрЃљ, рЃарЃЮрЃЏ рЃЉрЃљрЃюрЃЎрЃЮрЃЏрЃљрЃбрЃћрЃЉрЃўрЃф рЃЎрЃў рЃљрЃФрЃџрЃћрЃЋрЃћрЃю рЃцрЃБрЃџрЃА рЃЋрЃљрЃџрЃљрЃЊ
//: - рЃАрЃБрЃџрЃўрЃА рЃбрЃЎрЃўрЃЋрЃўрЃџрЃљрЃЏрЃЊрЃћ рЃЋрЃбрЃЎрЃўрЃЋрЃўрЃџрЃЮрЃЉРђд.
//: - рЃўрЃЏрЃћрЃЊрЃўрЃА рЃерЃБрЃЦрЃў рЃЕрЃљрЃЏрЃўрЃЦрЃарЃљ рЃЋрЃўрЃюрЃЏрЃћрЃЏ рЃљрЃАрЃљрЃюрЃЌрЃў рЃЏрЃљрЃЌрЃ«рЃЮрЃЋрЃћрЃЌ
//: - рЃљрЃарЃљрЃЋрЃўрЃюрЃљрЃљ рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃўРђдрЃЏрЃћ рЃљрЃарЃљрЃЋрЃўрЃю рЃЋрЃљрЃаРђдрЃћ.рЃў рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃЋрЃљрЃа
//: - рЃцрЃБрЃџрЃўрЃА рЃгрЃЋрЃўрЃЏрЃљ рЃарЃЮрЃЏ рЃЏрЃЮрЃЊрЃўрЃЮрЃЊрЃћрЃА рЃюрЃўрЃАрЃўрЃћрЃЉрЃўрЃА рЃарЃЋрЃћрЃБрЃџрЃў рЃЊрЃљрЃЏрЃћрЃфрЃћрЃЏрЃљ рЃЌрЃљрЃЋрЃќрЃћ
//: - рЃЌрЃЦрЃЋрЃћрЃю рЃЏрЃЮрЃ░рЃЎрЃљрЃџрЃўрЃЌ рЃФрЃћрЃарЃљ?
//: - рЃЉрЃћрЃЉрЃўрЃљрЃљрЃљ... рЃЉрЃћрЃЉрЃўрЃљ... рЃЮрЃџрЃўрЃљ рЃЏрЃљрЃЌрЃ«рЃЮрЃЋрЃљрЃарЃў рЃЏрЃћрЃЋрЃўрЃЊрЃљ...
//: - рЃЏрЃќрЃћ рЃљрЃдрЃљрЃа рЃљрЃЏрЃЮрЃЊрЃўрЃА рЃЕрЃљрЃњрЃЋрЃўрЃГрЃарЃћрЃА
class quoteGenerator {
    var quotes: [String]
    
    init(quotes: [String] = []) {
        self.quotes = quotes
    }
    
    func getRandomQuote() -> String? {
        guard let randQuote = quotes.randomElement() else {
            print("рЃњрЃљрЃЏрЃЮрЃюрЃљрЃЌрЃЦрЃЋрЃљрЃЏрЃћрЃЉрЃў рЃњрЃљрЃњрЃЋрЃўрЃЌрЃљрЃЋрЃЊрЃљ.")
            return nil
        }
        print(randQuote)
        return randQuote
    }
    
    func addQuote(_ quote: String) {
        quotes.append(quote)
    }
    
    func removeQuote(_ quote: String) {
        if let i = quotes.firstIndex(of: quote) {
            quotes.remove(at: i)
        } else {
            print("рЃњрЃљрЃЏрЃЮрЃюрЃљрЃЌрЃЦрЃЋрЃљрЃЏрЃў рЃЋрЃћрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ.")
        }
    }
}

let quotes = quoteGenerator()

let quotesToAdd = ["рЃЊрЃљрЃЋрЃўрЃюрЃљрЃ«рЃћ рЃЌрЃБ рЃљрЃарЃљ рЃЏрЃўрЃЋрЃ«рЃЋрЃЊрЃў, рЃарЃЮрЃЏ РђЊ \" рЃЊрЃћрЃЋрЃўрЃдрЃБрЃърЃћ \".", "рЃўрЃАрЃћрЃЌрЃў рЃљрЃцрЃћрЃарЃўрЃАрЃбрЃўрЃљ, рЃарЃЮрЃЏ рЃЉрЃљрЃюрЃЎрЃЮрЃЏрЃљрЃбрЃћрЃЉрЃўрЃф рЃЎрЃў рЃљрЃФрЃџрЃћрЃЋрЃћрЃю рЃцрЃБрЃџрЃА рЃЋрЃљрЃџрЃљрЃЊ", "рЃАрЃБрЃџрЃўрЃА рЃбрЃЎрЃўрЃЋрЃўрЃџрЃљрЃЏрЃЊрЃћ рЃЋрЃбрЃЎрЃўрЃЋрЃўрЃџрЃЮрЃЉРђд.", "рЃўрЃЏрЃћрЃЊрЃўрЃА рЃерЃБрЃЦрЃў рЃЕрЃљрЃЏрЃўрЃЦрЃарЃљ рЃЋрЃўрЃюрЃЏрЃћрЃЏ рЃљрЃАрЃљрЃюрЃЌрЃў рЃЏрЃљрЃЌрЃ«рЃЮрЃЋрЃћрЃЌ", "рЃљрЃарЃљрЃЋрЃўрЃюрЃљрЃљ рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃўРђдрЃЏрЃћ рЃљрЃарЃљрЃЋрЃўрЃю рЃЋрЃљрЃаРђдрЃћ.рЃў рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃЋрЃљрЃа", "рЃцрЃБрЃџрЃўрЃА рЃгрЃЋрЃўрЃЏрЃљ рЃарЃЮрЃЏ рЃЏрЃЮрЃЊрЃўрЃЮрЃЊрЃћрЃА рЃюрЃўрЃАрЃўрЃћрЃЉрЃўрЃА рЃарЃЋрЃћрЃБрЃџрЃў рЃЊрЃљрЃЏрЃћрЃфрЃћрЃЏрЃљ рЃЌрЃљрЃЋрЃќрЃћ", "рЃЌрЃЦрЃЋрЃћрЃю рЃЏрЃЮрЃ░рЃЎрЃљрЃџрЃўрЃЌ рЃФрЃћрЃарЃљ?", "рЃЉрЃћрЃЉрЃўрЃљрЃљрЃљ... рЃЉрЃћрЃЉрЃўрЃљ... рЃЮрЃџрЃўрЃљ рЃЏрЃљрЃЌрЃ«рЃЮрЃЋрЃљрЃарЃў рЃЏрЃћрЃЋрЃўрЃЊрЃљ...", "рЃЏрЃќрЃћ рЃљрЃдрЃљрЃа рЃљрЃЏрЃЮрЃЊрЃўрЃА рЃЕрЃљрЃњрЃЋрЃўрЃГрЃарЃћрЃА"]

for quote in quotesToAdd {
    quotes.addQuote(quote)
}

quotes.getRandomQuote()

quotes.addQuote("100 рЃарЃљ рЃдрЃЮрЃарЃў рЃЎрЃў рЃљрЃарЃљ рЃЋрЃљрЃа")
quotes.addQuote("рЃўрЃАрЃћрЃЌрЃў рЃЎрЃарЃўрЃќрЃўрЃАрЃўрЃљ рЃЕрЃљрЃўрЃА рЃарЃЮрЃЏ рЃЋрЃАрЃЋрЃљрЃЏ рЃЏрЃљрЃњрЃўрЃЊрЃљрЃќрЃћ рЃДрЃЋрЃћрЃџрЃў рЃЊрЃљ рЃърЃБрЃарЃўрЃА рЃАрЃБрЃарЃљрЃЌрЃў рЃЏрЃўрЃЊрЃћрЃЋрЃА")
quotes.addQuote("рЃерЃљрЃЦрЃљрЃарЃў рЃўрЃАрЃћ рЃњрЃљрЃФрЃЋрЃўрЃарЃЊрЃљ рЃЊрЃўрЃљрЃЉрЃћрЃбрЃў \"рЃАрЃЋрЃћрЃфрЃЎрЃў\" рЃЊрЃљрЃљрЃЋрЃљрЃЊрЃћрЃЉрЃљ рЃњрЃљрЃ«рЃЊрЃљ")
quotes.addQuote("рЃАрЃљрЃ«рЃџрЃерЃў рЃўрЃАрЃћ рЃњрЃЋрЃўрЃГрЃўрЃарЃА, рЃўрЃАрЃћ рЃњрЃЋрЃўрЃГрЃўрЃарЃА, рЃЏрЃљрЃЏрЃљрЃЕрЃћрЃЏрЃў рЃърЃБрЃарЃА рЃ«рЃљрЃцрЃљрЃюрЃњрЃўрЃЊрЃљрЃю рЃўрЃърЃљрЃарЃљрЃЋрЃА")
quotes.addQuote("рЃФрЃўрЃџрЃўрЃА рЃгрЃўрЃю рЃўрЃџрЃЮрЃфрЃћ рЃЊрЃћрЃќрЃЊрЃћрЃЏрЃЮрЃюрЃљ???")

print(quotes.quotes.count)
quotes.removeQuote("рЃЏрЃќрЃћ рЃљрЃдрЃљрЃа рЃљрЃЏрЃЮрЃЊрЃўрЃА рЃЕрЃљрЃњрЃЋрЃўрЃГрЃарЃћрЃА")
print(quotes.quotes.count)
